import pydantic
import typing
import typing_extensions

from .plan_create_body_metadata_obj0 import (
    PlanCreateBodyMetadataObj0,
    _SerializerPlanCreateBodyMetadataObj0,
)
from .plan_create_body_product_obj0 import (
    PlanCreateBodyProductObj0,
    _SerializerPlanCreateBodyProductObj0,
)
from .plan_create_body_tiers_item import (
    PlanCreateBodyTiersItem,
    _SerializerPlanCreateBodyTiersItem,
)
from .plan_create_body_transform_usage import (
    PlanCreateBodyTransformUsage,
    _SerializerPlanCreateBodyTransformUsage,
)


class PlanCreateBody(typing_extensions.TypedDict, total=False):
    """
    PlanCreateBody
    """

    active: typing_extensions.NotRequired[bool]
    """
    Whether the plan is currently available for new subscriptions. Defaults to `true`.
    """

    amount: typing_extensions.NotRequired[int]
    """
    A positive integer in cents (or local equivalent) (or 0 for a free plan) representing how much to charge on a recurring basis.
    """

    amount_decimal: typing_extensions.NotRequired[str]
    """
    Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.
    """

    billing_scheme: typing_extensions.NotRequired[
        typing_extensions.Literal["per_unit", "tiered"]
    ]
    """
    Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    """

    currency: typing_extensions.Required[str]
    """
    Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    """

    expand: typing_extensions.NotRequired[typing.List[str]]
    """
    Specifies which fields in the response should be expanded.
    """

    id: typing_extensions.NotRequired[str]
    """
    An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
    """

    interval: typing_extensions.Required[
        typing_extensions.Literal["day", "month", "week", "year"]
    ]
    """
    Specifies billing frequency. Either `day`, `week`, `month` or `year`.
    """

    interval_count: typing_extensions.NotRequired[int]
    """
    The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).
    """

    metadata: typing_extensions.NotRequired[
        typing.Union[PlanCreateBodyMetadataObj0, str]
    ]
    """
    Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    """

    meter: typing_extensions.NotRequired[str]
    """
    The meter tracking the usage of a metered price
    """

    nickname: typing_extensions.NotRequired[str]
    """
    A brief description of the plan, hidden from customers.
    """

    product: typing_extensions.NotRequired[typing.Union[PlanCreateBodyProductObj0, str]]

    tiers: typing_extensions.NotRequired[typing.List[PlanCreateBodyTiersItem]]
    """
    Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    """

    tiers_mode: typing_extensions.NotRequired[
        typing_extensions.Literal["graduated", "volume"]
    ]
    """
    Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
    """

    transform_usage: typing_extensions.NotRequired[PlanCreateBodyTransformUsage]
    """
    Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
    """

    trial_period_days: typing_extensions.NotRequired[int]
    """
    Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    """

    usage_type: typing_extensions.NotRequired[
        typing_extensions.Literal["licensed", "metered"]
    ]
    """
    Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    """


class _SerializerPlanCreateBody(pydantic.BaseModel):
    """
    Serializer for PlanCreateBody handling case conversions
    and file omissions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, typing.Any]

    active: typing.Optional[bool] = pydantic.Field(alias="active", default=None)
    amount: typing.Optional[int] = pydantic.Field(alias="amount", default=None)
    amount_decimal: typing.Optional[str] = pydantic.Field(
        alias="amount_decimal", default=None
    )
    billing_scheme: typing.Optional[typing_extensions.Literal["per_unit", "tiered"]] = (
        pydantic.Field(alias="billing_scheme", default=None)
    )
    currency: str = pydantic.Field(
        alias="currency",
    )
    expand: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="expand", default=None
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    interval: typing_extensions.Literal["day", "month", "week", "year"] = (
        pydantic.Field(
            alias="interval",
        )
    )
    interval_count: typing.Optional[int] = pydantic.Field(
        alias="interval_count", default=None
    )
    metadata: typing.Optional[
        typing.Union[_SerializerPlanCreateBodyMetadataObj0, str]
    ] = pydantic.Field(alias="metadata", default=None)
    meter: typing.Optional[str] = pydantic.Field(alias="meter", default=None)
    nickname: typing.Optional[str] = pydantic.Field(alias="nickname", default=None)
    product: typing.Optional[
        typing.Union[_SerializerPlanCreateBodyProductObj0, str]
    ] = pydantic.Field(alias="product", default=None)
    tiers: typing.Optional[typing.List[_SerializerPlanCreateBodyTiersItem]] = (
        pydantic.Field(alias="tiers", default=None)
    )
    tiers_mode: typing.Optional[typing_extensions.Literal["graduated", "volume"]] = (
        pydantic.Field(alias="tiers_mode", default=None)
    )
    transform_usage: typing.Optional[_SerializerPlanCreateBodyTransformUsage] = (
        pydantic.Field(alias="transform_usage", default=None)
    )
    trial_period_days: typing.Optional[int] = pydantic.Field(
        alias="trial_period_days", default=None
    )
    usage_type: typing.Optional[typing_extensions.Literal["licensed", "metered"]] = (
        pydantic.Field(alias="usage_type", default=None)
    )
