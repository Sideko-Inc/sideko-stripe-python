import pydantic
import typing
import typing_extensions


class PaymentMethodDetailsCardPresentReceipt(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_type: typing.Optional[
        typing_extensions.Literal["checking", "credit", "prepaid", "unknown"]
    ] = pydantic.Field(alias="account_type", default=None)
    """
    The type of account being debited or credited
    """
    application_cryptogram: typing.Optional[str] = pydantic.Field(
        alias="application_cryptogram", default=None
    )
    """
    EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    """
    application_preferred_name: typing.Optional[str] = pydantic.Field(
        alias="application_preferred_name", default=None
    )
    """
    Mnenomic of the Application Identifier.
    """
    authorization_code: typing.Optional[str] = pydantic.Field(
        alias="authorization_code", default=None
    )
    """
    Identifier for this transaction.
    """
    authorization_response_code: typing.Optional[str] = pydantic.Field(
        alias="authorization_response_code", default=None
    )
    """
    EMV tag 8A. A code returned by the card issuer.
    """
    cardholder_verification_method: typing.Optional[str] = pydantic.Field(
        alias="cardholder_verification_method", default=None
    )
    """
    Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
    """
    dedicated_file_name: typing.Optional[str] = pydantic.Field(
        alias="dedicated_file_name", default=None
    )
    """
    EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    """
    terminal_verification_results: typing.Optional[str] = pydantic.Field(
        alias="terminal_verification_results", default=None
    )
    """
    The outcome of a series of EMV functions performed by the card reader.
    """
    transaction_status_information: typing.Optional[str] = pydantic.Field(
        alias="transaction_status_information", default=None
    )
    """
    An indication of various EMV functions performed during the transaction.
    """
