import pydantic
import typing
import typing_extensions

from .payment_flows_payment_intent_presentment_details import (
    PaymentFlowsPaymentIntentPresentmentDetails,
)
from .refund_destination_details import RefundDestinationDetails
from .refund_metadata import RefundMetadata
from .refund_next_action import RefundNextAction

if typing_extensions.TYPE_CHECKING:
    from .balance_transaction import BalanceTransaction
    from .charge import Charge
    from .payment_intent import PaymentIntent
    from .transfer_reversal import TransferReversal


class Refund(pydantic.BaseModel):
    """
    Refund objects allow you to refund a previously created charge that isn't
    refunded yet. Funds are refunded to the credit or debit card that's
    initially charged.

    Related guide: [Refunds](https://stripe.com/docs/refunds)
    """

    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: int = pydantic.Field(
        alias="amount",
    )
    """
    Amount, in cents (or local equivalent).
    """
    balance_transaction: typing.Optional[typing.Union[str, "BalanceTransaction"]] = (
        pydantic.Field(alias="balance_transaction", default=None)
    )
    """
    Balance transaction that describes the impact on your account balance.
    """
    charge: typing.Optional[typing.Union[str, "Charge"]] = pydantic.Field(
        alias="charge", default=None
    )
    """
    ID of the charge that's refunded.
    """
    created: int = pydantic.Field(
        alias="created",
    )
    """
    Time at which the object was created. Measured in seconds since the Unix epoch.
    """
    currency: str = pydantic.Field(
        alias="currency",
    )
    """
    Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    """
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    """
    An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
    """
    destination_details: typing.Optional[RefundDestinationDetails] = pydantic.Field(
        alias="destination_details", default=None
    )
    failure_balance_transaction: typing.Optional[
        typing.Union[str, "BalanceTransaction"]
    ] = pydantic.Field(alias="failure_balance_transaction", default=None)
    """
    After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    """
    failure_reason: typing.Optional[str] = pydantic.Field(
        alias="failure_reason", default=None
    )
    """
    Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
    """
    id: str = pydantic.Field(
        alias="id",
    )
    """
    Unique identifier for the object.
    """
    instructions_email: typing.Optional[str] = pydantic.Field(
        alias="instructions_email", default=None
    )
    """
    For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
    """
    metadata: typing.Optional[RefundMetadata] = pydantic.Field(
        alias="metadata", default=None
    )
    """
    Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    """
    next_action: typing.Optional[RefundNextAction] = pydantic.Field(
        alias="next_action", default=None
    )
    object: typing_extensions.Literal["refund"] = pydantic.Field(
        alias="object",
    )
    """
    String representing the object's type. Objects of the same type share the same value.
    """
    payment_intent: typing.Optional[typing.Union[str, "PaymentIntent"]] = (
        pydantic.Field(alias="payment_intent", default=None)
    )
    """
    ID of the PaymentIntent that's refunded.
    """
    presentment_details: typing.Optional[
        PaymentFlowsPaymentIntentPresentmentDetails
    ] = pydantic.Field(alias="presentment_details", default=None)
    reason: typing.Optional[
        typing_extensions.Literal[
            "duplicate",
            "expired_uncaptured_charge",
            "fraudulent",
            "requested_by_customer",
        ]
    ] = pydantic.Field(alias="reason", default=None)
    """
    Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    """
    receipt_number: typing.Optional[str] = pydantic.Field(
        alias="receipt_number", default=None
    )
    """
    This is the transaction number that appears on email receipts sent for this refund.
    """
    source_transfer_reversal: typing.Optional[typing.Union[str, "TransferReversal"]] = (
        pydantic.Field(alias="source_transfer_reversal", default=None)
    )
    """
    The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account.
    """
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
    """
    Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
    """
    transfer_reversal: typing.Optional[typing.Union[str, "TransferReversal"]] = (
        pydantic.Field(alias="transfer_reversal", default=None)
    )
    """
    This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.
    """
