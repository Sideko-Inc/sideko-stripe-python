import pydantic
import typing
import typing_extensions

from .payment_method_details_card_present_offline import (
    PaymentMethodDetailsCardPresentOffline,
)

if typing_extensions.TYPE_CHECKING:
    from .payment_method import PaymentMethod


class SetupAttemptPaymentMethodDetailsCardPresent(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    generated_card: typing.Optional[typing.Union[str, "PaymentMethod"]] = (
        pydantic.Field(alias="generated_card", default=None)
    )
    """
    The ID of the Card PaymentMethod which was generated by this SetupAttempt.
    """
    offline: typing.Optional[PaymentMethodDetailsCardPresentOffline] = pydantic.Field(
        alias="offline", default=None
    )
